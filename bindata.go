// Code generated by go-bindata.
// sources:
// www/app.js
// www/index.html
// www/styles.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wwwAppJs = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x54\xc1\x6e\x9b\x40\x10\xbd\xfb\x2b\x26\x51\xa5\x5d\x62\x0b\xc7\x52\x4e\x45\x3e\xa4\xa9\xa5\x1c\xda\x1c\xaa\x1e\x2a\x55\x3d\x6c\xd8\x31\x6c\x03\xbb\xee\xee\x90\xc6\xaa\xfc\xef\x1d\xd6\x26\x06\xbb\x75\x54\x55\x0a\x07\x16\xd8\xf7\x66\x1e\xef\x0d\xc8\x65\x63\x73\x32\xce\x82\x4c\xe0\xd7\x08\xf8\x10\x4d\x40\x08\xe4\x4d\x4e\x22\x8b\x4f\xe2\xe9\x51\x79\xc0\x27\x13\x28\xc0\x1c\xf6\xac\xc6\x57\x1d\xb1\x43\x95\x44\x2b\xc6\x58\xfc\x09\x5f\x3e\x7e\xb8\xe5\xbb\x4f\xf8\xa3\xc1\x40\x32\xc9\x46\xcf\xc8\x16\x95\xba\x15\x5a\x29\x6e\x17\xd7\xef\xc5\x04\xb8\xd4\x04\x96\xaa\x0a\x98\x64\x43\x58\x40\xab\x07\x64\x8f\xd4\x78\xbb\xdb\x24\x45\x4d\x80\xb3\xf9\x1c\xae\x2e\xaf\xb6\xcc\x4d\x4f\xf8\x1b\xa9\x5d\xde\xd4\x68\x29\x49\x3d\x2a\xbd\xfe\xc3\x3b\x6f\x71\x22\x0d\x95\xd1\x18\x44\xd2\x5e\xe4\x0f\x72\xbf\xf9\x5c\x2d\x56\xdf\xe9\xeb\xd6\x78\x9a\x5e\xb0\x69\xca\x13\xdc\xaf\xa1\x72\xee\xc1\xd8\x02\x96\xce\xc3\xaa\x5d\x4d\x85\x61\x02\x54\xa2\x85\xef\xab\x02\x2e\xa6\x7b\x4b\x2b\xac\xd9\xac\x4e\x62\x5a\x20\x2d\xf8\x11\x5f\x86\x77\xeb\x9b\x4a\x85\x70\xa7\x6a\x94\xa2\x53\xf6\xf5\xf2\x5b\xaf\xa9\x59\x82\xdc\x86\x22\x85\xa9\x8b\xe9\x2c\xe5\x76\x22\x39\x4c\x84\x9d\xe5\x1e\x3d\xc4\xde\xdf\x56\xa2\x6c\x31\x86\x11\xb3\x6c\x17\x71\x8c\x35\x03\x33\x1e\xf7\x4b\x75\xe5\xa2\x96\xbe\xe8\x9c\x7d\x25\xdc\xe9\x8e\x4a\x44\x2f\xc2\x8e\xa6\xcd\xe3\x09\x12\xef\x1e\x92\x06\x37\xb1\x29\x4f\x02\x5d\x13\xcf\xe6\x7d\x43\xad\x29\x3e\xdf\xce\xcd\x01\x91\x6b\xa5\x6a\xc5\xb3\xa5\x6f\x4a\x53\x69\x19\xb9\xa7\x8a\xb7\x29\x0c\x18\x5c\xe1\x14\xbe\x67\xa8\x80\x31\x48\x33\x9e\x25\xbc\x8a\x03\x73\xdb\x23\x77\x36\xb8\x0a\xd3\xca\x15\xf2\x9c\x79\x6f\xe1\xfc\x50\xf2\x66\x34\x68\xb2\x61\x39\xfc\x09\x1e\x67\xcb\xa3\xf3\x42\xb6\x2d\xe2\xd5\xb3\xfd\x97\x64\x4e\xbb\xfe\x62\x4e\x7f\xf5\x7d\xf8\xe2\xff\xe5\xfb\xde\x93\xe9\x14\x94\xd6\x80\xde\xb3\x91\x35\x86\xa0\x8a\x18\x8b\x75\x54\xb6\x9f\xb7\x09\x50\x2b\xca\x4b\xd4\x83\x44\x18\x7f\xc2\xc0\x72\xd6\xf7\x8f\xb1\xc3\xb9\x1b\xb2\x3e\xe3\x13\xdd\x39\xcd\x86\x2e\xa2\x88\xca\x29\x1d\x3b\xd7\x2c\x25\x9c\xf1\x34\x64\xa3\x23\xa3\x8e\x6c\xe5\x26\xdd\x1f\x6b\xb4\x91\xcc\xf9\x1d\x00\x00\xff\xff\xc9\x27\x62\xa8\xf6\x05\x00\x00"

func wwwAppJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwAppJs,
		"www/app.js",
	)
}

func wwwAppJs() (*asset, error) {
	bytes, err := wwwAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/app.js", size: 1526, mode: os.FileMode(420), modTime: time.Unix(1434346432, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _wwwIndexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x49\x4f\xc3\x30\x10\x85\xef\x48\xfc\x87\xa9\xef\xb1\x55\xa4\x0a\x84\xd2\x5e\x58\xae\x70\x28\x07\x8e\xae\x3d\xc8\x6e\x9d\x05\xcf\x50\xc8\xbf\x27\x8b\x2b\x5c\x50\x05\xe4\x90\xcc\x78\x79\xdf\xbc\xa7\x94\xb3\xdb\x87\x9b\xf5\xf3\xe3\x1d\x38\xae\xc2\xea\xfc\xac\x4c\x5f\xe8\x9f\xd2\xa1\xb6\xa9\x1e\xfb\x0a\x59\x83\x71\x3a\x12\xf2\x52\x3c\xad\xef\x8b\x2b\x91\xef\xb3\xe7\x80\xab\xf1\x5d\xaa\xa9\xc9\x76\x83\xaf\x77\x10\x31\x2c\x05\x71\x17\x90\x1c\x22\x0b\x70\x11\x5f\x0e\x2b\xd2\x10\x09\xe0\xae\xc5\xa5\x60\xfc\x60\x35\xf4\xbf\x4b\x7c\xbb\x90\x24\x1d\x73\x4b\xd7\x4a\x19\x5b\xcb\x2d\x59\x0c\x7e\x1f\x65\x8d\xac\xb6\xaf\x6f\x18\x3b\x49\xc1\x9b\x9d\x9a\xcb\x85\x5c\xa8\xb1\x1e\xe9\x2a\xc7\x91\x89\xbe\xe5\x5c\x7f\xab\xf7\x7a\x5a\x15\x40\xd1\x4c\x94\x01\xd2\x58\x94\x49\xd8\x34\x55\x62\x14\x73\x79\x29\x2f\x64\xe5\x87\x09\xc4\xaa\x54\xd3\xd5\x43\xbc\x2a\xcb\xb7\xdc\x34\xb6\xeb\xeb\x8c\x6e\xfd\x1e\x4c\xd0\x44\xbd\xdb\xe0\x2d\x1e\x45\x31\x9e\x98\x15\x05\xbc\xfb\x10\x60\x83\xa0\xad\x45\x0b\xdc\x80\xaf\x81\x1d\xc2\xd7\xa4\x50\x14\xb9\x29\xd5\xeb\x1e\x83\xfe\x68\xf3\x7f\x61\x9e\x30\x9d\x03\x47\x65\xdd\xb6\xc3\xb9\x13\xf4\x9f\x99\xa5\x9c\xfa\xf0\xa6\x1f\xf5\x33\x00\x00\xff\xff\xf3\xf2\x18\xb3\xc2\x02\x00\x00"

func wwwIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexHtml,
		"www/index.html",
	)
}

func wwwIndexHtml() (*asset, error) {
	bytes, err := wwwIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.html", size: 706, mode: os.FileMode(420), modTime: time.Unix(1434345933, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _wwwStylesCss = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8d\xc1\xae\xc2\x20\x10\x45\xf7\x7c\xc5\x24\x2f\x6f\xd9\x97\xf6\x99\xc6\x84\x7e\x0d\x74\x86\x76\x22\x32\x0d\xd0\xa8\x31\xfe\xbb\xa0\x55\x57\x86\x0d\x9c\x7b\xb8\xd7\x0a\x5e\xe0\xaa\x00\xac\x19\x0f\x53\x94\x35\x60\x33\x8a\x97\xa8\xe1\x87\xb0\x9e\x41\xdd\x94\x4a\x9e\x91\xbe\x79\xce\xb9\xa1\x24\x27\xc6\x3c\x6b\xd8\xb7\xed\x72\xae\xef\x99\x78\x9a\xb3\x86\xae\x7b\x91\x45\x12\x67\x96\xa0\xc1\xd8\x24\x7e\xcd\x54\xa9\x95\x88\x14\x9b\x68\x90\xd7\x54\xf4\xff\x2a\x97\xcd\xbf\x91\x42\x2e\xc1\x67\xdb\x93\x2b\x7d\x7d\xfb\x5b\xbf\x65\x59\xde\xf7\xa3\x89\x13\x87\x66\xcb\xfb\x6d\x6e\xa3\x0f\x71\xf7\x84\xb5\x56\xdd\x03\x00\x00\xff\xff\x48\xb6\x3a\x69\xf4\x00\x00\x00"

func wwwStylesCssBytes() ([]byte, error) {
	return bindataRead(
		_wwwStylesCss,
		"www/styles.css",
	)
}

func wwwStylesCss() (*asset, error) {
	bytes, err := wwwStylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/styles.css", size: 244, mode: os.FileMode(420), modTime: time.Unix(1434266886, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"www/app.js": wwwAppJs,
	"www/index.html": wwwIndexHtml,
	"www/styles.css": wwwStylesCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"www": &bintree{nil, map[string]*bintree{
		"app.js": &bintree{wwwAppJs, map[string]*bintree{
		}},
		"index.html": &bintree{wwwIndexHtml, map[string]*bintree{
		}},
		"styles.css": &bintree{wwwStylesCss, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

