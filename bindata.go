// Code generated by go-bindata.
// sources:
// www/app.js
// www/index.html
// www/styles.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wwwAppJs = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x56\x4d\x8f\xdb\x36\x10\xbd\xef\xaf\x60\xdc\x00\x92\x62\x5b\x5e\xa3\x01\x8a\xae\xba\x05\x52\x77\x81\x14\xd8\xe6\x90\xb4\x40\x81\xa2\x07\x46\x1c\x4b\xec\xd2\xa4\x4b\x52\x76\x8c\xc6\xff\xbd\x43\xca\x1f\xa4\xc5\x1a\xe9\xa1\x39\x85\x87\xb5\x96\x7c\xc3\x99\x79\xf3\x38\x64\xbe\xec\x64\x6d\xb9\x92\x24\x2f\xc8\xdf\x37\x04\x47\xd6\x19\x20\xc6\x6a\x5e\xdb\xac\xf2\x33\xfe\xcf\x86\x6a\x52\x77\x5a\x83\xb4\xef\x04\x67\x40\xee\xc9\xbc\x3a\xad\x18\x37\x65\x70\xee\xf6\xc2\x04\x3e\x70\x63\xdd\xc2\xd9\x51\xa7\xc5\xd1\xd7\x11\xd5\x5a\xbb\x46\x8c\x84\x2d\xf9\xed\xe7\xc7\xd7\xf8\xdf\x5b\xf8\xab\x03\x63\xf3\xa2\xba\x39\x21\x1d\xaa\x54\x6b\x90\x79\xf6\xfa\xe1\xd5\x8f\xd9\x84\xe0\x56\x13\xb2\xa4\xc2\x40\x51\xc5\x30\x03\x92\x45\xc6\x1a\x6c\xa7\xe5\x61\xd1\x52\xdb\x19\xf2\xec\xfe\x9e\xbc\xbc\x7d\xd9\x5b\xee\x83\xc0\x9f\xe7\x4c\xd5\xdd\x0a\x53\x2d\x4a\x0d\x94\xed\x12\x34\xb9\x31\x7b\x81\x44\x51\x6d\xc9\xfb\x1d\x11\x4a\x3d\x71\xd9\x90\xa5\xd2\x64\xed\x7e\xb9\x00\x33\x21\xb6\x05\x49\xfe\x5c\x37\xe4\xc5\x2c\xca\x18\x04\xac\x30\xe3\xa3\x9f\xb2\x01\xfb\x80\x53\xf8\x69\x7e\xd8\x2d\x04\x35\xe6\x0d\x5d\x41\x9e\xf5\xc4\x66\xc5\xef\xb7\x7f\x04\xc9\xf0\x25\xc9\x7b\x66\xf3\x8c\xaf\x9a\xd9\xbc\x44\x97\x59\x11\xc6\x76\x74\x84\x14\xa1\x9f\x00\x55\x0d\x20\xfc\x5c\xcb\xe3\x70\x59\xe4\xd5\xa1\x7a\xbe\x62\x15\xe1\xe3\xf1\xa5\x83\xa8\xfc\x61\x3a\x35\xd2\x66\xe1\x90\x91\x8f\x31\x2b\xaa\xa4\x29\xe3\x9b\x2b\x86\xb8\x9a\x85\x55\x3c\x0e\xef\x10\x8b\x6c\x5f\x59\x54\xea\xfb\xce\x3a\xaa\x74\xdd\x4b\x22\xe1\x29\x85\xaf\x1d\xcb\x68\xd1\x73\x9c\x15\x03\x23\x74\x7e\xd5\x64\x5a\x2b\x69\x29\x97\xa0\x53\xc9\x0d\xad\x19\xb5\x74\xda\x52\xd3\xe2\x0e\x23\xbf\xc3\x68\xcc\x53\xd9\x39\x53\xba\x46\xa1\xb3\x45\xcb\x05\xcb\x3d\x36\x05\x74\x2a\x8a\x90\x68\x99\xc2\x05\x22\xc8\xc8\x98\xe4\x7c\x3c\x2f\xf0\x37\x4b\x08\xc2\x0d\xcc\xcb\x28\x01\xa5\x50\x4d\x3e\x42\xdb\x3b\x32\x4a\x11\xbb\xbf\x19\x50\xec\x4e\x3a\x9f\xce\x83\x10\xf6\x18\x24\x36\x94\xa1\x62\xf1\x50\x7c\x82\x62\x1d\xea\x8b\x62\xbf\x28\xf6\xa4\xd8\xa1\x20\xdc\xf8\x1f\x14\x1b\xeb\x66\x36\x23\x94\x31\x02\x5a\xa3\xce\x56\x60\x0c\x6d\xbc\xa8\xa5\xb2\xad\x6b\xfb\xdc\x90\x15\xb5\x75\x0b\x6c\x20\x56\xb4\xb9\xa2\x97\x76\x7e\x59\x0a\xc4\xc7\x0c\xc5\x96\xbf\xc0\x07\xfb\x46\x31\xac\xce\x83\x0f\x46\x28\xca\x7c\x04\x2b\x0c\xc9\x3c\xc3\x33\x75\x41\xe7\x80\x72\x74\x10\xb8\x3c\x73\x32\xfc\x78\x9e\x67\xe5\xf1\x06\x2a\xd5\x56\x2c\xa8\x56\xf8\x3c\x10\x79\x4c\x8e\xa4\x1b\xde\x50\x77\x3f\xde\xf5\xb7\xf1\x24\xe6\x19\xc3\x13\xf0\x93\xc5\x1b\xef\x8e\x58\xdd\x5d\x2c\xff\xfa\xf6\xd1\x49\xec\x11\x0f\x2e\xa0\x32\x53\x10\xab\xa9\x34\xdc\x39\x78\x67\x77\x02\x70\x9b\xd1\x92\xa2\x18\xcf\x49\x04\x09\x45\xf7\x2c\x06\x8d\xe4\xbb\x3c\xf0\x6b\x5a\x1f\xe2\x0f\x29\xc7\xf9\x52\xe1\x93\xa2\x6e\xa9\x6c\x80\x39\x5c\x79\xc2\x4d\x4e\xef\x96\x1c\x36\xee\x3d\x70\x21\x8b\x48\x77\x1e\xe1\x95\xd7\x63\x03\x8e\x8b\x74\x74\x14\x2b\xb8\x5d\xb4\x50\x3f\x45\x2f\x24\x70\x6e\xe2\x1a\xe2\x3a\x90\x8f\x1f\xc9\x96\x4b\xa6\xb6\xa5\x77\x70\x51\x67\xdf\x62\xcb\x27\xd8\x2d\x94\x6b\x6d\x78\x7a\xbe\xfe\x26\x4b\xf5\x3f\xd4\xb2\x80\xa5\xed\xbd\x5f\x3d\x4a\xd9\x42\xf0\xfa\x09\x58\x80\x4f\x35\x8e\xc1\x84\x0b\x25\x7a\x2c\x7e\x4f\xe6\xa9\x48\xbc\xbf\x00\x37\x9d\x0e\x37\x77\x43\xa8\xda\xcb\xab\x74\x42\x41\x2a\x46\x5f\xf5\xcd\x08\x3b\x42\x68\x3e\x34\xde\x5f\x39\xfe\xe7\x7b\x29\x26\xed\xdb\x7f\x23\x4d\xf3\xa6\xfd\x4f\xac\x05\x06\xc9\x3b\x61\x40\xd3\x77\x87\x9e\xf4\x29\x5c\x8d\xc7\x9f\x89\xab\x44\x83\x38\xb5\x24\x25\x91\x3a\x14\xa4\x44\x47\x67\x31\x1f\x5e\xd4\x98\xf2\x3e\xc7\x76\xf4\x4f\x00\x00\x00\xff\xff\x65\xe8\xea\x1f\x65\x0c\x00\x00"

func wwwAppJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwAppJs,
		"www/app.js",
	)
}

func wwwAppJs() (*asset, error) {
	bytes, err := wwwAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/app.js", size: 3173, mode: os.FileMode(420), modTime: time.Unix(1434355572, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _wwwIndexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x53\x3d\x73\xe3\x20\x10\xed\x6f\xe6\xfe\x03\xa6\x07\xc6\xe7\xe2\x6e\x6e\x24\x37\xf9\x68\x93\xc2\x29\x52\x62\x58\x8f\x50\x90\x50\x60\xfd\xa1\x7f\x1f\x24\xe4\x31\x76\xec\x49\x93\x99\xb8\x31\xbb\x3c\x76\xdf\xbe\xb7\x2a\x66\xf7\x4f\x77\xab\xd7\xe7\x07\x52\x61\x63\x97\xbf\x7f\x15\xd3\x3f\x89\xbf\xa2\x02\xa9\xa7\xf3\x18\x37\x80\x92\xa8\x4a\xfa\x00\x58\xd2\x97\xd5\x23\xfb\x47\xf3\x7b\x34\x68\x61\x19\xac\xd1\x50\x88\x14\x9c\x6e\x33\x9c\x35\xed\x1b\xf1\x60\x4b\x1a\xb0\xb7\x10\x2a\x00\xa4\x04\xfb\x0e\x4a\x8a\x70\x40\xa1\x42\xa0\xa4\xf2\xb0\x29\x69\x85\xd8\x85\xff\x42\x28\xdd\xd6\x81\x2b\xeb\xb6\x7a\x63\xa5\x07\xae\x5c\x23\x64\x2d\x0f\xc2\x9a\x75\x10\x6e\x6f\x99\x92\xde\x6d\x03\x58\x31\xe7\x0b\xbe\x18\x52\xfc\x98\xe2\x43\x45\x31\xcc\x37\x63\xec\x07\x78\x60\x05\x0d\xf0\xc6\xb4\x13\x11\xc6\x96\x5f\xea\x91\xfa\xa6\xcc\xf8\xec\x92\x59\x2c\x91\x15\x09\xca\x9b\x0e\x73\x4c\x2d\x77\x32\x65\x29\x09\x5e\xa5\x19\x86\x11\x9c\x06\x5e\xbf\x6f\xc1\xf7\x23\xfb\x74\x64\x73\xfe\x97\xff\x19\x39\xd6\xb1\x76\x21\xd2\xd3\xe3\x2e\x88\x6c\x19\x8a\xb5\xd3\xfd\x79\x77\x6d\x76\x44\x59\x19\x42\x64\x3c\xf8\x1f\xd8\xde\xcb\xae\x03\x9f\x2f\xc8\x75\xe4\x25\x62\x44\x0d\x36\xed\x8d\xb5\x64\x0d\x44\x6a\x0d\x9a\xa0\x23\xa6\x25\x51\x48\x72\x9a\x8b\x9c\xe9\x98\x78\xc6\xfa\xb9\xb6\x53\x7c\x4b\xa8\xc8\xd1\x1a\x25\xd1\xb8\xf6\xba\x5e\xdf\xb0\x7b\x37\x24\xcd\xc9\x8c\xed\x22\x97\x01\x77\xc3\xc2\xcf\x8e\x4c\x2e\x44\x6b\xd2\x37\xfb\x11\x00\x00\xff\xff\x5e\xa3\xd1\xbe\xcd\x03\x00\x00"

func wwwIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexHtml,
		"www/index.html",
	)
}

func wwwIndexHtml() (*asset, error) {
	bytes, err := wwwIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.html", size: 973, mode: os.FileMode(420), modTime: time.Unix(1434352733, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _wwwStylesCss = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x92\x51\x4f\x84\x30\x0c\xc7\xdf\xf9\x14\x4b\x8c\x8f\x98\x9d\x2f\x46\xfc\x34\xe3\x56\xa0\x71\x47\x49\x57\x0e\x8d\xf1\xbb\xbb\x63\x1b\xe7\x44\x7d\xb9\x91\x10\xfa\x5f\xbb\xf6\xf7\x67\x2d\xd9\x77\xf5\x51\xa9\xb0\x5a\x73\x7c\xed\x99\xe6\xd1\xd6\x47\x72\xc4\x8d\xba\x03\x7b\x79\x5e\xd6\xed\x05\xad\x0c\x8d\x3a\x68\x7d\x1f\x85\x01\xb0\x1f\x24\x2b\x9f\x55\xf5\xe0\x1d\x5a\xf0\xf5\xc2\x66\x9a\x80\xd3\xb1\x39\xed\x49\xeb\xe9\x2d\x56\xae\xaf\x89\x3c\x0a\xd2\xd8\x28\xd3\x7a\x72\xb3\x40\xdc\x74\xd0\x85\x6c\x1d\x03\x8e\xb5\x29\x12\x9a\xb6\xef\x96\x44\xe8\xb4\x85\x27\xc3\x3d\x5e\xce\x9a\x85\xbe\x0d\x13\x48\x46\x31\x38\xfe\x37\x4d\x06\x3b\x5c\x25\x3a\x03\x77\x8e\x96\x46\x0d\x68\x2d\x8c\xb9\x25\x5b\xe0\x9a\x8d\xc5\xd9\x87\x82\xc7\x9c\xfe\x8b\x73\x5d\xd7\xdd\x82\x73\x35\x87\xc1\x19\xc1\x33\x94\x98\xfa\x27\x68\xc2\xdb\xfd\xa4\xbf\x5c\x5e\x7b\xd7\xcf\x61\x6d\x10\x69\x82\x42\x8c\xd3\x17\x52\x62\x28\xb4\xbd\xfb\xb4\xb8\x7c\x0f\x6a\x0a\x5d\xb3\xff\xb7\xda\x51\x52\xec\xec\xf8\x0a\x00\x00\xff\xff\x00\x6b\x92\x3c\xcf\x02\x00\x00"

func wwwStylesCssBytes() ([]byte, error) {
	return bindataRead(
		_wwwStylesCss,
		"www/styles.css",
	)
}

func wwwStylesCss() (*asset, error) {
	bytes, err := wwwStylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/styles.css", size: 719, mode: os.FileMode(420), modTime: time.Unix(1434352885, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"www/app.js": wwwAppJs,
	"www/index.html": wwwIndexHtml,
	"www/styles.css": wwwStylesCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"www": &bintree{nil, map[string]*bintree{
		"app.js": &bintree{wwwAppJs, map[string]*bintree{
		}},
		"index.html": &bintree{wwwIndexHtml, map[string]*bintree{
		}},
		"styles.css": &bintree{wwwStylesCss, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

