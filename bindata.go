// Code generated by go-bindata.
// sources:
// www/app.js
// www/index.html
// www/styles.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wwwAppJs = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x56\xdf\x8f\x1b\x27\x10\x7e\xbf\xbf\x82\xb8\x91\x60\x63\x7b\x7d\x56\x23\x55\x8d\x7b\x95\x52\xf7\xa4\x54\xba\xe6\x21\x69\xa5\x4a\x55\x1f\xc8\x32\xf6\x52\x63\x70\x81\x3d\xc7\x6a\xfc\xbf\x77\xd8\xf5\x0f\xf0\x52\x2b\x7d\x68\x9e\x8e\x87\xf3\x1e\x7c\xc3\xcc\x7c\xf3\x31\xc0\x16\x8d\xae\xbc\x34\x9a\xb0\x82\xfc\x7d\x43\x70\xd0\xc6\x01\x71\xde\xca\xca\xd3\x59\x3b\xd3\xfe\x79\xe4\x96\x54\x8d\xb5\xa0\xfd\x7b\x25\x05\x90\x3b\x32\x9d\x9d\x56\x5c\x98\x72\x38\x77\x7b\x61\x02\x1f\xa5\xf3\x61\xe1\xec\xa8\xb1\xea\xe8\xeb\x88\xaa\xbd\xdf\x20\x46\xc3\x96\xfc\xf6\xf3\xc3\x1b\xfc\xef\x1d\xfc\xd5\x80\xf3\xac\x98\xdd\x9c\x90\x01\x55\x9a\x0d\x68\x46\xdf\xdc\xbf\xfe\x91\x8e\x08\x6e\x35\x22\x0b\xae\x1c\x14\xb3\x14\xe6\x40\x8b\xc4\xd8\x82\x6f\xac\x3e\x2c\x7a\xee\x1b\x47\x9e\xdd\xdd\x91\x97\xb7\x2f\x3b\xcb\x7d\x14\xf8\x73\x26\x4c\xd5\xac\x31\xd5\xa2\xb4\xc0\xc5\x2e\x43\x53\x18\x93\x17\x48\x14\xb7\x9e\x7c\xd8\x11\x65\xcc\x4a\xea\x25\x59\x18\x4b\x36\xe1\x57\x2a\x70\x23\xe2\x6b\xd0\xe4\xcf\xcd\x92\xbc\x98\x24\x19\x83\x82\x35\x66\x7c\xf4\x53\x2e\xc1\xdf\xe3\x14\x7e\xba\x1f\x76\x73\xc5\x9d\x7b\xcb\xd7\xc0\x68\x47\x2c\x2d\x7e\xbf\xfd\x23\x4a\x46\x2e\x08\xeb\x98\x65\x54\xae\x97\x93\x69\x89\x2e\x69\x11\xc7\x76\x74\x84\x14\xa1\x9f\x08\x35\xeb\x41\xe4\xb9\x96\xc7\x11\xb2\x60\xb3\x43\xf5\xda\x8a\xcd\x88\x1c\x0e\x2f\x1d\x24\xe5\x8f\xd3\xa9\x90\x36\x0f\x87\x8c\xda\x18\x69\x31\xcb\x9a\x0a\xf9\x78\xc5\x10\x57\x69\x5c\xc5\xe3\x68\x1d\x62\x91\xfd\x6b\x8f\x4a\xfd\xd0\xf8\x40\x95\xad\x3a\x49\x64\x3c\xe5\xf0\x55\x60\x19\x2d\x3a\x8e\x69\xd1\x33\x42\xe7\x57\x4d\xc6\x95\xd1\x9e\x4b\x0d\x36\x97\x5c\xdf\x5a\x70\xcf\xc7\x35\x77\x35\xee\x30\x68\x77\x18\x0c\x65\x2e\xbb\x60\xca\x37\x28\x74\x31\xaf\xa5\x12\xac\xc5\xe6\x80\x41\x45\x09\x12\x2d\x73\xb8\x48\x04\x94\x0c\x09\x93\xc3\x69\x81\xbf\x34\x23\x88\x30\x30\x2f\x67\x14\x94\xca\x2c\xd9\x00\x6d\x5f\x91\x41\x8e\xd8\xfd\x4d\x8f\xe2\x70\xd2\xe5\x78\x1a\x85\xb0\xc7\x20\xb1\xa1\xf4\x15\x8b\x87\xe2\x33\x14\x1b\x50\x4f\x8a\x7d\x52\xec\x49\xb1\x7d\x41\x84\xf1\x3f\x28\x36\xd5\xcd\x64\x42\xb8\x10\x04\xac\x45\x9d\xad\xc1\x39\xbe\x6c\x45\xad\x8d\xaf\x43\xdb\x97\x8e\xac\xb9\xaf\x6a\x10\x3d\xb1\xa2\xcd\x15\xbd\xd4\xd3\xcb\x52\x20\x3e\x65\x28\xb5\xfc\x05\x3e\xfa\xb7\x46\x60\x75\xee\xdb\x60\x94\xe1\xa2\x8d\x60\x8d\x21\xb9\x67\x78\xa6\x2e\xe8\xec\x51\x8e\x0e\x22\x97\x67\x4e\xfa\x1f\xcf\x19\x2d\x8f\x37\x50\x69\xb6\x6a\xce\xad\xc1\xe7\x81\x62\x29\x39\x0e\xfd\x2b\xf8\xc9\xe3\x95\xf6\x8a\x78\xdb\xc0\x28\x59\xfe\xf5\xdd\x43\xd0\xd0\x03\x9e\x4c\x40\xe9\xe5\x20\xde\x72\xed\x64\xb8\x61\xdf\xfb\x9d\x02\xdc\x66\xb0\xe0\xa8\xb6\x73\x94\x51\xc4\xc9\x45\x8a\x51\x21\xbb\x21\x50\xfc\x1a\x57\x87\x00\x63\x4e\x71\xbe\x34\xf8\x66\xa8\x6a\xae\x97\x20\x02\xae\x3c\xe1\x46\xa7\x87\x09\x83\xc7\x70\xe1\x5f\xd4\x3d\x11\x56\x8b\x68\xa5\xd5\x61\x23\x12\x8b\x7c\x74\x1c\x4b\xb4\x9d\xd7\x50\xad\x92\x27\x10\x04\x37\x69\x91\x70\x1d\xc8\xa7\x4f\x64\x2b\xb5\x30\xdb\xb2\x75\x70\x51\xc8\xb6\x87\x96\x2b\xd8\xcd\x4d\xe8\x5d\x78\x3c\xbe\xfe\x86\xe6\x1a\x1c\x8a\x55\xc1\xc2\x77\xde\xaf\x9e\x15\x3a\x57\xb2\x5a\x81\x88\xf0\xb9\xce\xd0\x9b\x08\xa1\x24\xaf\xc1\xef\xc9\x34\x17\x49\xeb\x2f\xc2\x8d\xc7\xfd\xcd\xc3\x50\xa6\xe2\x81\x9a\x32\x08\x05\xa9\x18\x7c\xd5\x75\x1b\x3c\xf2\xb1\x79\xdf\x78\x7f\xe5\x7c\x9f\x2f\x9e\x94\xb4\x6f\xff\x8d\x34\x2b\x97\xf5\x7f\x62\x2d\x32\xc8\x36\xfd\x1e\x4d\xdf\x1d\x9a\xce\xe7\x70\x35\x1c\x7e\x21\xae\x32\x1d\xe0\xd4\x73\x8c\x46\xea\x50\x90\x1a\x1d\x9d\xc5\x7c\x78\x32\x63\xca\x7b\x86\xfd\xe6\x9f\x00\x00\x00\xff\xff\xb6\x30\x88\x2d\x46\x0c\x00\x00"

func wwwAppJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwAppJs,
		"www/app.js",
	)
}

func wwwAppJs() (*asset, error) {
	bytes, err := wwwAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/app.js", size: 3142, mode: os.FileMode(420), modTime: time.Unix(1434351495, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _wwwIndexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x53\x3d\x73\xe3\x20\x10\xed\x6f\xe6\xfe\x03\xa6\x07\xc6\xe7\xe2\x6e\x6e\x24\x37\xf9\x68\x93\xc2\x29\x52\x62\x58\x8f\x50\x90\x50\x60\xfd\xa1\x7f\x1f\x24\xe4\x31\x76\xec\x49\x93\x99\xb8\x31\xbb\x3c\x76\xdf\xbe\xb7\x2a\x66\xf7\x4f\x77\xab\xd7\xe7\x07\x52\x61\x63\x97\xbf\x7f\x15\xd3\x3f\x89\xbf\xa2\x02\xa9\xa7\xf3\x18\x37\x80\x92\xa8\x4a\xfa\x00\x58\xd2\x97\xd5\x23\xfb\x47\xf3\x7b\x34\x68\x61\x19\xac\xd1\x50\x88\x14\x9c\x6e\x33\x9c\x35\xed\x1b\xf1\x60\x4b\x1a\xb0\xb7\x10\x2a\x00\xa4\x04\xfb\x0e\x4a\x8a\x70\x40\xa1\x42\xa0\xa4\xf2\xb0\x29\x69\x85\xd8\x85\xff\x42\x28\xdd\xd6\x81\x2b\xeb\xb6\x7a\x63\xa5\x07\xae\x5c\x23\x64\x2d\x0f\xc2\x9a\x75\x10\x6e\x6f\x99\x92\xde\x6d\x03\x58\x31\xe7\x0b\xbe\x18\x52\xfc\x98\xe2\x43\x45\x31\xcc\x37\x63\xec\x07\x78\x60\x05\x0d\xf0\xc6\xb4\x13\x11\xc6\x96\x5f\xea\x91\xfa\xa6\xcc\xf8\xec\x92\x59\x2c\x91\x15\x09\xca\x9b\x0e\x73\x4c\x2d\x77\x32\x65\x29\x09\x5e\xa5\x19\x86\x11\x9c\x06\x5e\xbf\x6f\xc1\xf7\x23\xfb\x74\x64\x73\xfe\x97\xff\x19\x39\xd6\xb1\x76\x21\xd2\xd3\xe3\x2e\x88\x6c\x19\x8a\xb5\xd3\xfd\x79\x77\x6d\x76\x44\x59\x19\x42\x64\x3c\xf8\x1f\xd8\xde\xcb\xae\x03\x9f\x2f\xc8\x75\xe4\x25\x62\x44\x0d\x36\xed\x8d\xb5\x64\x0d\x44\x6a\x0d\x9a\xa0\x23\xa6\x25\x51\x48\x72\x9a\x8b\x9c\xe9\x98\x78\xc6\xfa\xb9\xb6\x53\x7c\x4b\xa8\xc8\xd1\x1a\x25\xd1\xb8\xf6\xba\x5e\xdf\xb0\x7b\x37\x24\xcd\xc9\x8c\xed\x22\x97\x01\x77\xc3\xc2\xcf\x8e\x4c\x2e\x44\x6b\xd2\x37\xfb\x11\x00\x00\xff\xff\x5e\xa3\xd1\xbe\xcd\x03\x00\x00"

func wwwIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexHtml,
		"www/index.html",
	)
}

func wwwIndexHtml() (*asset, error) {
	bytes, err := wwwIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.html", size: 973, mode: os.FileMode(420), modTime: time.Unix(1434352733, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _wwwStylesCss = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x92\x51\x4f\x84\x30\x0c\xc7\xdf\xf9\x14\x4b\x8c\x8f\x98\x9d\x2f\x46\xfc\x34\xe3\x56\xa0\x71\x47\x49\x57\x0e\x8d\xf1\xbb\xbb\x63\x1b\xe7\x44\x7d\xb9\x91\x10\xfa\x5f\xbb\xf6\xf7\x67\x2d\xd9\x77\xf5\x51\xa9\xb0\x5a\x73\x7c\xed\x99\xe6\xd1\xd6\x47\x72\xc4\x8d\xba\x03\x7b\x79\x5e\xd6\xed\x05\xad\x0c\x8d\x3a\x68\x7d\x1f\x85\x01\xb0\x1f\x24\x2b\x9f\x55\xf5\xe0\x1d\x5a\xf0\xf5\xc2\x66\x9a\x80\xd3\xb1\x39\xed\x49\xeb\xe9\x2d\x56\xae\xaf\x89\x3c\x0a\xd2\xd8\x28\xd3\x7a\x72\xb3\x40\xdc\x74\xd0\x85\x6c\x1d\x03\x8e\xb5\x29\x12\x9a\xb6\xef\x96\x44\xe8\xb4\x85\x27\xc3\x3d\x5e\xce\x9a\x85\xbe\x0d\x13\x48\x46\x31\x38\xfe\x37\x4d\x06\x3b\x5c\x25\x3a\x03\x77\x8e\x96\x46\x0d\x68\x2d\x8c\xb9\x25\x5b\xe0\x9a\x8d\xc5\xd9\x87\x82\xc7\x9c\xfe\x8b\x73\x5d\xd7\xdd\x82\x73\x35\x87\xc1\x19\xc1\x33\x94\x98\xfa\x27\x68\xc2\xdb\xfd\xa4\xbf\x5c\x5e\x7b\xd7\xcf\x61\x6d\x10\x69\x82\x42\x8c\xd3\x17\x52\x62\x28\xb4\xbd\xfb\xb4\xb8\x7c\x0f\x6a\x0a\x5d\xb3\xff\xb7\xda\x51\x52\xec\xec\xf8\x0a\x00\x00\xff\xff\x00\x6b\x92\x3c\xcf\x02\x00\x00"

func wwwStylesCssBytes() ([]byte, error) {
	return bindataRead(
		_wwwStylesCss,
		"www/styles.css",
	)
}

func wwwStylesCss() (*asset, error) {
	bytes, err := wwwStylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/styles.css", size: 719, mode: os.FileMode(420), modTime: time.Unix(1434352885, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"www/app.js": wwwAppJs,
	"www/index.html": wwwIndexHtml,
	"www/styles.css": wwwStylesCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"www": &bintree{nil, map[string]*bintree{
		"app.js": &bintree{wwwAppJs, map[string]*bintree{
		}},
		"index.html": &bintree{wwwIndexHtml, map[string]*bintree{
		}},
		"styles.css": &bintree{wwwStylesCss, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

