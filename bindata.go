// Code generated by go-bindata.
// sources:
// www/app.js
// www/index.html
// www/styles.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wwwAppJs = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"

func wwwAppJsBytes() ([]byte, error) {
	return bindataRead(
		_wwwAppJs,
		"www/app.js",
	)
}

func wwwAppJs() (*asset, error) {
	bytes, err := wwwAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/app.js", size: 0, mode: os.FileMode(420), modTime: time.Unix(1434327277, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _wwwIndexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x91\x3d\x4f\xc3\x30\x10\x86\x77\x24\xfe\x83\xb9\x1d\x9f\x18\x2a\x31\x38\x59\xf8\x58\x61\x28\x03\xa3\x71\x0e\xd9\xa9\x13\x82\xef\xa8\xc8\xbf\x27\xb1\x5d\x44\x91\x40\xea\x62\xbf\xf7\xf9\xf8\x95\xcd\xc5\xed\xc3\xcd\xf6\xf9\xf1\x4e\x79\x19\x62\x7b\x7e\x66\xea\xad\x94\xf1\x64\xbb\xac\x16\x3d\x90\x58\xe5\xbc\x4d\x4c\xd2\xc0\xd3\xf6\xfe\xf2\x1a\x0e\x35\x09\x12\xa9\xcd\xa7\xc1\x12\xd4\x4a\x0c\xe3\x4e\x25\x8a\x0d\xb0\xcc\x91\xd8\x13\x09\x28\x9f\xe8\xf5\x90\xd1\x8e\x19\x94\xcc\x13\x35\x20\xf4\x29\xb8\xc6\xff\x8f\xff\x6a\xae\xeb\x10\x5d\x37\xea\x9e\x3b\x8a\x61\x9f\xf4\x48\x82\xfd\xfb\x07\xa5\x59\x73\x0c\x6e\x87\x57\x7a\xa3\x37\x98\x75\x66\x62\xf1\x88\xdf\x26\xcd\xcb\x5b\x37\x2f\xaa\xb2\xd9\xa5\x30\xc9\x4f\x58\x6f\xf7\xb6\x64\x41\x71\x72\xa7\x21\x87\xb0\x76\x42\x6b\xb0\xac\x68\x8f\x31\x79\x9f\x9d\xa6\xb5\xe7\x0f\xe6\xf1\xa8\xc1\xfa\xdc\xc5\x41\xf9\xb0\xaf\x00\x00\x00\xff\xff\xd9\x07\x03\x09\xca\x01\x00\x00"

func wwwIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwIndexHtml,
		"www/index.html",
	)
}

func wwwIndexHtml() (*asset, error) {
	bytes, err := wwwIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/index.html", size: 458, mode: os.FileMode(420), modTime: time.Unix(1434317912, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _wwwStylesCss = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8d\xc1\xae\xc2\x20\x10\x45\xf7\x7c\xc5\x24\x2f\x6f\xd9\x97\xf6\x99\xc6\x84\x7e\x0d\x74\x86\x76\x22\x32\x0d\xd0\xa8\x31\xfe\xbb\xa0\x55\x57\x86\x0d\x9c\x7b\xb8\xd7\x0a\x5e\xe0\xaa\x00\xac\x19\x0f\x53\x94\x35\x60\x33\x8a\x97\xa8\xe1\x87\xb0\x9e\x41\xdd\x94\x4a\x9e\x91\xbe\x79\xce\xb9\xa1\x24\x27\xc6\x3c\x6b\xd8\xb7\xed\x72\xae\xef\x99\x78\x9a\xb3\x86\xae\x7b\x91\x45\x12\x67\x96\xa0\xc1\xd8\x24\x7e\xcd\x54\xa9\x95\x88\x14\x9b\x68\x90\xd7\x54\xf4\xff\x2a\x97\xcd\xbf\x91\x42\x2e\xc1\x67\xdb\x93\x2b\x7d\x7d\xfb\x5b\xbf\x65\x59\xde\xf7\xa3\x89\x13\x87\x66\xcb\xfb\x6d\x6e\xa3\x0f\x71\xf7\x84\xb5\x56\xdd\x03\x00\x00\xff\xff\x48\xb6\x3a\x69\xf4\x00\x00\x00"

func wwwStylesCssBytes() ([]byte, error) {
	return bindataRead(
		_wwwStylesCss,
		"www/styles.css",
	)
}

func wwwStylesCss() (*asset, error) {
	bytes, err := wwwStylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/styles.css", size: 244, mode: os.FileMode(420), modTime: time.Unix(1434266886, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"www/app.js": wwwAppJs,
	"www/index.html": wwwIndexHtml,
	"www/styles.css": wwwStylesCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"www": &bintree{nil, map[string]*bintree{
		"app.js": &bintree{wwwAppJs, map[string]*bintree{
		}},
		"index.html": &bintree{wwwIndexHtml, map[string]*bintree{
		}},
		"styles.css": &bintree{wwwStylesCss, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

